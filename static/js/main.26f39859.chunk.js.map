{"version":3,"sources":["redux/contacts/contactsActions.js","redux/contacts/contactsReducer.js","redux/store.js","components/ContactsEditor/ContactEditor.js","components/ContactList/ContactList.js","components/Filter.js","components/AlertMessage/AlertMessage.js","components/App.js","index.js"],"names":["addContact","createAction","contact","payload","contacts","id","uuidv4","removeContact","getFilterValue","toggleAlert","items","createReducer","contactsActions","state","action","filter","combineReducers","alert","type","store","configureStore","reducer","contactsReducer","ContactEditor","name","number","handleChangeName","e","setState","target","value","handleChangeNumber","reset","dublicate","props","some","item","toLowerCase","handleSubmit","preventDefault","onAlert","setTimeout","onAddContact","this","className","onSubmit","onChange","Component","mapDispatchToProps","connect","onRemoveContact","normalizedFilter","toLocaleLowerCase","includes","TransitionGroup","component","map","CSSTransition","timeout","classNames","onClick","onChangeFilter","AlertMessage","in","appear","unmountOnExit","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26f39859.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\n// import actionTypes from \"./contactActionTypes\"\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nconst addContact = createAction('contacts/add', contact => ({\r\n  payload: {\r\n    contacts: {\r\n      id: uuidv4(),\r\n      ...contact,\r\n    }\r\n}}));\r\n\r\nconst removeContact = createAction('contacts/remove');\r\nconst getFilterValue = createAction('contacts/getFilterValue');\r\nconst toggleAlert = createAction('contacts/existContact');\r\n\r\nexport default {\r\n  addContact,\r\n  removeContact,\r\n  getFilterValue,\r\n  toggleAlert,\r\n};"," import { combineReducers } from 'redux';\r\n import { createReducer } from \"@reduxjs/toolkit\";\r\n import contactsActions from \"./contactsActions\";\r\n \r\nconst addContact = (state, action) => {\r\n  return [...state, action.payload.contacts];\r\n};\r\n\r\nconst removeContact = (state, action) => {\r\n  return state.filter(contact => contact.id !== action.payload)\r\n}\r\n\r\n const items = createReducer([], {\r\n   [contactsActions.addContact]: addContact,\r\n   [contactsActions.removeContact]: removeContact,\r\n })\r\n\r\n const filter = createReducer('', {\r\n  [contactsActions.getFilterValue]: (state, action) => action.payload,\r\n });\r\n\r\n const alert = (state = false, {type}) => {\r\n   switch (type) {\r\n     case contactsActions.toggleAlert.type:\r\n       return !state;\r\n   \r\n     default:\r\n       return state;\r\n   }\r\n };\r\n\r\n export default combineReducers({\r\n   items,\r\n   filter,\r\n   alert,\r\n });","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport contactsReducer from '../redux/contacts/contactsReducer'\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer\r\n  },\r\n});\r\n\r\nexport default store;","import React, {Component} from \"react\";\r\nimport { connect } from 'react-redux';\r\nimport contactsActions from \"../../redux/contacts/contactsActions\";\r\nimport PropTypes from 'prop-types';\r\nimport './ContactEditor.css'\r\n\r\n class ContactEditor extends Component {\r\n  static propTypes = {\r\n    name: PropTypes.string,\r\n    number: PropTypes.string,\r\n  };\r\n\r\n state = {\r\n   name: '',\r\n   number: '',\r\n };\r\n\r\n handleChangeName = e => {\r\n   this.setState({\r\n     name: e.target.value,\r\n   });\r\n };\r\n\r\n handleChangeNumber = e => {\r\n   this.setState({\r\n     number: e.target.value,\r\n   });\r\n };\r\n\r\n reset = () => {\r\n  this.setState({ name: \"\", number: \"\" });\r\n };\r\n\r\n dublicate = () => {\r\n  return this.props.items.some(\r\n    (item) => item.name.toLowerCase() === this.state.name.toLowerCase()\r\n  );\r\n };\r\n\r\n handleSubmit = e => {\r\n  e.preventDefault();\r\n\r\n  if (this.dublicate()) {\r\n    this.props.onAlert();\r\n      setTimeout(() => {\r\n        this.props.onAlert();\r\n      }, 2000);\r\n  } else {\r\n      this.props.onAddContact({ ...this.state });\r\n      this.reset();\r\n  };\r\n };\r\n\r\n render(){\r\n   const { name, number } = this.state;\r\n   return (\r\n    <form className=\"ContactEditor\" onSubmit={this.handleSubmit}>\r\n    <label className=\"ContactEditor-label\">\r\n      Name\r\n      <input\r\n        className=\"ContactEditor-input\"\r\n        type=\"text\"\r\n        value={name}\r\n        onChange={this.handleChangeName}\r\n      />\r\n    </label>\r\n    <label className=\"ContactEditor-label\">\r\n      Number\r\n      <input\r\n        className=\"ContactEditor-input\"\r\n        type=\"text\"\r\n        value={number}\r\n        onChange={this.handleChangeNumber}\r\n      />\r\n    </label>\r\n\r\n    <button type=\"submit\" className=\"ContactEditor-button\">\r\n      Add contact\r\n    </button>\r\n  </form>\r\n   )\r\n }\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    items: state.contacts.items,\r\n  }\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContact: contactsActions.addContact,\r\n  onAlert: contactsActions.toggleAlert,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactEditor);","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../../redux/contacts/contactsActions\";\r\nimport {TransitionGroup, CSSTransition} from 'react-transition-group'\r\nimport './ContactList.css'\r\n\r\nconst ContactList = ({ contacts, onRemoveContact}) => (\r\n  <TransitionGroup component='ul' className=\"ContactList\">\r\n    {contacts.map(contact => (\r\n      <CSSTransition key={contact.id} timeout={500} classNames=\"ContactList-item\">\r\n        <div className=\"ContactList-item\">\r\n          <div className=\"ContactList-text\">{contact.name}: {contact.number}</div>\r\n          <button\r\n          type=\"button\"\r\n          className=\"ContactList-button\"\r\n          onClick={() =>\r\n            onRemoveContact(contact.id)\r\n          }\r\n          >\r\n            Delete\r\n          </button>\r\n        </div>\r\n      </CSSTransition>\r\n    ))}\r\n  </TransitionGroup>\r\n);\r\n\r\nconst mapStateToProps = state => {\r\n  const { items, filter } = state.contacts;\r\n  const normalizedFilter = filter.toLocaleLowerCase();\r\n\r\n  const visibleContacts = items.filter(contact =>\r\n    contact.name.toLowerCase().includes(normalizedFilter));\r\n\r\n  return {\r\n    contacts: visibleContacts,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onRemoveContact: contactsActions.removeContact,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);","import React from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport contactsActions from \"../redux/contacts/contactsActions\";\r\nimport './ContactsEditor/ContactEditor.css';\r\n\r\nconst Filter = ({ value, onChangeFilter}) => (\r\n  <div className=\"ContactEditor\">\r\n    <p>Find contact by name</p>\r\n    <input \r\n    type=\"text\" \r\n    className=\"ContactEditor-input\" \r\n    value={value} \r\n    onChange={e => onChangeFilter(e.target.value)} \r\n    />\r\n  </div>\r\n);\r\n\r\nconst mapStateToProps = state => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  onChangeFilter: contactsActions.getFilterValue,\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);","import React from 'react';\r\nimport './AlertMessage.css';\r\n\r\nfunction AlertMessage () {\r\n  return (\r\n    <div className='alert'>\r\n      <span className='alert-message'>\r\n        Contact already exists!\r\n      </span>\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default AlertMessage;","import React from 'react';\nimport { connect } from \"react-redux\";\nimport { CSSTransition } from 'react-transition-group'\nimport ContactEditor from '../components/ContactsEditor/ContactEditor';\nimport ContactList from '../components/ContactList/ContactList';\nimport Filter from \"./Filter\";\nimport AlertMessage from \"./AlertMessage/AlertMessage\"\nimport './App.css'\n// import PropTypes from 'prop-types';\n\nfunction App ({alert}) {\n  return (\n    <div className='wrapper'>\n      <div className='header'>\n        <CSSTransition\n          in={true}\n          appear={true}\n          classNames='fade'\n          timeout={500}\n          unmountOnExit\n        >\n          <h1 className='logo'>Phonebook</h1>\n        </CSSTransition>\n        {alert && <AlertMessage />}\n      </div>\n\n      <ContactEditor />\n      <Filter />\n      <ContactList />\n\n    </div>\n  )\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    alert: state.contacts.alert,\n  };\n};\n\nexport default connect(mapStateToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport store from './redux/store'\nimport App from './components/App';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}